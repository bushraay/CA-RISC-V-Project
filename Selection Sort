# MAIN
addi x21, x0, 2
# Store array values in contiguous memory at mem address 0x0:
# {1, 5, 3, 4, 10, 22, 2, 3, 44}
 addi x10, x0, 0

 addi x5, x0, 1
 sw x5, 0(x10) 
 addi x5, x0, 5
 sw x5, 4(x10)
 addi x5, x0, 3
 sw x5, 8(x10)
 addi x5, x0, 21
 sw x5, 12(x10)
 addi x5, x0, 10
 sw x5, 16(x10)


addi x11, x0, 5   # size of 'arr'

SEL_SORT:
addi x5, x0, 0 # i
addi x6, x0, 0 # j
addi x7, x0, 0 # min_index

addi x8, x11, 0 # store n.
addi x11, x11, -1 # n-1
UNSORTED_ARRAY_BOUNDARY_LOOP:
beq x5, x11, END_UNSORTED_ARRAY_BOUNDARY_LOOP # (while i < (n-1))

addi x7, x5, 0   # min_index = i
addi x6, x5, 1   # j = i + 1

SUBARRAY_LOOP:   
beq x6, x8, END_SUBARRAY_LOOP # (while j < n)

sll x30, x6,x21  # j * sizeof(int)
add x31, x10, x30
lw x29, 0(x31)    # Load arr[j]   

sll x30, x7, x21  # min_index * sizeof(int)
add x31, x10, x30  # arr[min_index]
lw x28, 0(x31)    # Load arr[min_index] 

blt x28, x29, MIN_REMAINS_SAME # if (arr[min_index] < arr[j]), don't change the min.
addi x7, x6,0   # min_index = j
MIN_REMAINS_SAME:

addi x6, x6, 1  # j = j + 1
beq x0, x0, SUBARRAY_LOOP
END_SUBARRAY_LOOP:

sll x30, x7, x21    # min_index * sizeof(int)
add x31, x10, x30    # arr[min_index]
lw x28, 0(x31)      # Load arr[min_index]  

sll x6, x5, x21    # i * sizeof(int)
add x6, x6, x10    # arr[i] 
lw x29, 0(x6)      # Load arr[i]

sw x28, 0(x6)
sw x29, 0(x31)      # swap(&arr[min_index], &arr[i])

addi x5, x5, 1   # i = i + 1
beq x0, x0, UNSORTED_ARRAY_BOUNDARY_LOOP
END_UNSORTED_ARRAY_BOUNDARY_LOOP: 



EXIT:
